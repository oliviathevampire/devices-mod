plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

version rootProject.version

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    forgeRuntimeLibrary "org.jetbrains.kotlin:kotlin-stdlib:1.7.10"
    forgeRuntimeLibrary "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10"
    forgeRuntimeLibrary "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.10"
    forgeRuntimeLibrary "org.jetbrains.kotlin:kotlin-reflect:1.7.10"

    forgeRuntimeLibrary "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    forgeRuntimeLibrary "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.6.4"
    forgeRuntimeLibrary "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.6.4"
    forgeRuntimeLibrary "org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:1.3.3"
    forgeRuntimeLibrary "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.3.3"
    forgeRuntimeLibrary "org.jetbrains.kotlinx:kotlinx-serialization-cbor-jvm:1.3.3"
    forgeRuntimeLibrary 'org.jetbrains.kotlinx:atomicfu-jvm:0.18.3'
    forgeRuntimeLibrary "org.jetbrains.kotlinx:kotlinx-datetime-jvm:0.4.0"

    forgeRuntimeLibrary "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.10"
    forgeRuntimeLibrary "org.jetbrains.kotlin:kotlin-stdlib:1.7.10"
    forgeRuntimeLibrary "com.ultreon:ultranlang:0.0.1-dev5"
    forgeRuntimeLibrary "com.jab125:apoint:1.0.0"

//    include("org.jetbrains.kotlin:kotlin-stdlib:1.7.10")
//    implementation include("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10")
//    include("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.10")
//    implementation include("org.jetbrains.kotlin:kotlin-reflect:1.7.10")
//
//    include("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
//    include("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.6.4")
//    include("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.6.4")
//    include("org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:1.3.3")
//    include("org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.3.3")
//    include("org.jetbrains.kotlinx:kotlinx-serialization-cbor-jvm:1.3.3")
//    include('org.jetbrains.kotlinx:atomicfu-jvm:0.18.3')
//    include("org.jetbrains.kotlinx:kotlinx-datetime-jvm:0.4.0")

//    include("org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.7.10")
//    include("org.jetbrains.kotlin:kotlin-stdlib:1.7.10")

    implementation include("com.ultreon:ultranlang:0.0.1-dev5")
    implementation include("com.jab125:apoint:1.0.0")

   // shadowCommon "org.jetbrains.kotlin:kotlin-reflect:1.7.10"
    //shadowCommon "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10"
   // shadowCommon "com.jab125:apoint:1.0.0"
}

processResources {
    inputs.property "version", rootProject.getIngame_version()

    filesMatching("META-INF/mods.toml") {
        expand "version": rootProject.getIngame_version()
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"

//    relocate 'org.jetbrains.kotlin', "com.ultreon.devices.shadow.org.jetbrains.kotlin"
//    relocate 'org.jetbrains.kotlinx', "com.ultreon.devices.shadow.org.jetbrains.kotlinx"
//
//    relocate 'kotlin', "com.ultreon.devices.shadow.kotlin"
//    relocate 'kotlinx', "com.ultreon.devices.shadow.kotlinx"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
